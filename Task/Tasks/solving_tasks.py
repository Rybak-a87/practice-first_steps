import time


#--------------------------------------------
# Таблица умножения
def task_1():
	print("Таблица умножения nxn.")
	n = int(input("Введите значение n: "))
	for i in range(1, n + 1):
		for j in range(1, n + 1):
			print(i * j, end="	")
		print()


#=========================================
# Таблица не в виде таблици
def task_2():
	print("Таблица умножения nxn в виде списка равенства.")
	n = int(input("Введите значение n: "))
	for i in range(1, n + 1):
		for j in range(1, n + 1):
			res = i * j
			print(f"{i} * {j} = {res}")


#----------------------------------------
#Ёлочка (ёлочный счет)
def task_3():
	n = int(input("Введите целое полодительное число для формирования ёлочки: "))
	a = 1 #строчка
	b = 1 #колличество цифр в строчке(шт)
	for i in range(1, n + 1):
		print(i, end=" ")
		if i == a:
			print()
			b += 1 
			a += b 

	
#----------------------------------------
#Логический максимум
#с помощью цикла for (мне почему-то удобнее так)
def task_4_for():
	all_max = 0 #максимальная высота туннелей всех дорог из минимальной высоты тунеелей на одной дороге
	d = int(input("Какое колличество дорог до точки назначения?: ")) #колличество дорог
	for i in range(d): 
		t = int(input(f"Какое колличество туннелей на {i + 1}-й дороге: ")) #колличество туннелей (i + 1 так как при range(d) - цикл начинается с 0. )
		t_min = 0 #минимальная высота тунеелей на одной дороге
		for j in range(t):
			v = int(input(f"Укажите высоту {j + 1}-го туннеля на {i + 1}-й дороге: ")) #высота туннеля
			if t_min == 0 or t_min > v: #определение минимальной высоты тунеелей на одной дороге
				t_min = v
		if all_max == 0 or all_max < t_min:	#определение максимальной высоты туннелей всех дорог из минимальной высоты тунеелей на одной дороге
			all_max = t_min
			n = i + 1 #номер подходяшей дороги
	print(f"Из {d}-х дорог, наилучний вариант - это {n}-ая дорога. Допустимая максимальная высота грузовика: {all_max}")


#с помощью цикла while
def task_4_while():
	all_max = 0 #максимальная высота туннелей всех дорог из минимальной высоты тунеелей на одной дороге
	d = int(input("Какое колличество дорог до точки назначения?: ")) #колличество дорог
	i = 1
	while i <= d:
		t = int(input(f"Какое колличество туннелей на {i}-й дороге: ")) #колличество туннелей
		t_min = 0 #минимальная высота тунеелей на одной дороге
		for j in range(t):
			v = int(input(f"Укажите высоту {j + 1}-го туннеля на {i + 1}-й дороге: ")) #высота туннеля
			if t_min == 0 or t_min > v: #определение минимальной высоты тунеелей на одной дороге
				t_min = v
		if all_max == 0 or all_max < t_min:	#определение максимальной высоты туннелей всех дорог из минимальной высоты тунеелей на одной дороге
			all_max = t_min
			n = i #номер подходяшей дороги
		i += 1	
	print(f"Из {d}-х дорог, наилучний вариант - это {n}-ая дорога. Допустимая максимальная высота грузовика: {all_max}")


#--------------------------------------------------------------
#Таблица деления
def task_5():
	print("Таблица деления по заланному размеру.")
	a = int(input("Введите колличество кологок: "))
	b = int(input("Введите колличество строк: "))
	for i in range(1, b + 1):
		for j in range(1, a + 1):
			res = round(j / i, 2) #Результат округляется до второго числа после запятой
			print(res, end=" ") 
		print()


#---------------------------------------------
#Рисуем прямоугольник
def task_6():
	print("Рисуем прямоугольника.")
	a = int(input("Укажите ширину прямоугольника: "))
	b = int(input("Укажите высоту прямоугольника: "))
	c = input("Контур прямоугольника: ")
	for i in range(b):
		if i == 0 or i == b - 1:
			for j in range(a):
				print(c, end='')
		else:
			for j in range(a):
				if j == 0 or j == a - 1:
					print(c, end="")
				else:
					print(end=" ")
		print()


#---------------------------------------------
#Обратный отсчет: серия пуска
def task_7():
	print("Обратный отсчет: серия пуска")
	a = int(input("Введите колличество запускаемых аппаратов: "))
	for i in range(a):
		for j in range(i, -1, -1):
			print(f"Осталось секунд: {j}")
		print(f"Пуск {i + 1}")


#---------------------------------------------
#Простые числа на миллион долларов
def task_8():
	a = int(input("Введите напуральное число: "))
	print(f"Все простые числа, меньше {a}:")
	for i in range(2, a):
		b = False
		for j in range(2, int(i / 2 + 1)): #?
			if i % j == 0:
				b = True
		if b is not True:
			print(i)


#-----------------------------------------------
#Начинающий фермер
def task_9():
	s = int(input("Укажите размер выделяемой супсидии в тыс.рублей: ")) #560
	b = int(input("Укажите колличество голов скота, которые необходимо купить ")) #100
	bull_pr = 20 #цена одного быка
	cow_pr = 10 #цена одной коровы
	calf_pr = 5 #цена одного теленка
	bull = s // bull_pr #исходя из того что минимум один бык должен быть, узнаем сколько быкав мы можем купить - столько же будет циклов проверки
	for i in range(1 ,bull + 1): #проверяем комбинации с разным колличеством быков
		balance1 = s - (i * bull_pr) #остаток стедств после покупки быков
		cow = balance1 // cow_pr #узнаем сколько коров мы можем купить на оставшиеся стедства - столько же будет циклов проверки
		for j in range(cow): #проверяем комбинации с разным колличеством коров
			balance2 = balance1 - (j * cow_pr) #остаток стедств после покупки быков и коров
			calf = balance2 // calf_pr #узнаем сколько коров мы можем купить на оставшиеся стедства
			if (i + j + calf) == b: #проверка соответствия количества голов скота с требуемым колличеством пользователя
				print(f"На субсидию {s} тыс.рублей, можно купить:\nБыки: {i}, Коровы: {j}, Телята: {calf}") #вывод необходимого результата


#--------------------------------------------------
#Числовая дружба
def task_10():
	a = int(input("Для поиска натуральных дружественных чисел, укажите в каком диапозоне искать от 1 до: "))
	for i in range(a):
		sum1 = 0 #сумма делителей проверяемого числа
		sum2 = 0 #сумма делителей от суммы делителей проверяемого числа
		for j in range(1, i // 2 + 1): #перебераем делители проверяемого числа
			if i % j == 0: #если делитель есть - плюсуел
				sum1 += j
		for l in range(1, sum1 // 2 + 1): #проверяем делители суммы делителей проверяемого числа
			if sum1 % l == 0:#если делитель есть - плюсуел
				sum2 += l
		if sum2 == i and sum2 != sum1: # #сумма делителей от суммы делителей проверяемого числа равна проверяемому числу и сумма делителей проверяемого числа не равна сумма делителей от суммы делителей проверяемого числа
			print(f"Дружественных чисел: {sum2} <-> {sum1}")
	print("Поиск завершен.")


#---------------------------------------------------------			
def timeMin(a):
    min = int(a[0] + a[1]) * 60 + int(a[3] + a [4])
    return min

def late(now, classes, bus):
    now = timeMin(now)
    classes = timeMin(classes)
    vrem = classes - now
    print(now, classes, vrem)

late("11:50", "12:30", [1, 5, 8, 15, 30])


starttime = time.time()

#task_1()
#task_2()
#task_3()
#task_4_for()
#task_4_while()
#task_5()
#task_6()
#task_7()
#task_8()
#task_9()
#task_10()

print(f"Время выполнения кода: {time.time() - starttime}")